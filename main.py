
import requests
from pyrogram import Client, filters
from pyrogram.enums import ParseMode, ChatType
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from telethon import TelegramClient
from telethon.sessions import StringSession
from pyrogram.errors import (
    ApiIdInvalid,
    PhoneNumberInvalid,
    PhoneCodeInvalid,
    PhoneCodeExpired,
    SessionPasswordNeeded,
    PasswordHashInvalid
)
from telethon.errors import (
    ApiIdInvalidError,
    PhoneNumberInvalidError,
    PhoneCodeInvalidError,
    PhoneCodeExpiredError,
    SessionPasswordNeededError,
    PasswordHashInvalidError
)
from asyncio.exceptions import TimeoutError

# ‡§Ø‡•Ç‡§ú‡§∞ ‡§∏‡•á API ID, API HASH ‡§î‡§∞ BOT TOKEN ‡§≤‡•á‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è
API_ID = 28049056  # ‡§Ö‡§™‡§®‡§æ API ID ‡§Ø‡§π‡§æ‡§Å ‡§°‡§æ‡§≤‡•á‡§Ç (Integer ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è)
API_HASH = "1a301acbe312e760b4d0716fd3b8eab2"  # ‡§Ö‡§™‡§®‡§æ API HASH ‡§Ø‡§π‡§æ‡§Å ‡§°‡§æ‡§≤‡•á‡§Ç
BOT_TOKEN = "7589052839:AAGPMVeZpb63GEG_xXzQEua1q9ewfNzTg50"  # ‡§Ö‡§™‡§®‡§æ BOT TOKEN ‡§Ø‡§π‡§æ‡§Å ‡§°‡§æ‡§≤‡•á‡§Ç

# ‡§ü‡§æ‡§á‡§Æ‡§Ü‡§â‡§ü ‡§µ‡•à‡§≤‡•ç‡§Ø‡•Ç‡§ú‡§º
TIMEOUT_OTP = 600  # 10 ‡§Æ‡§ø‡§®‡§ü
TIMEOUT_2FA = 300  # 5 ‡§Æ‡§ø‡§®‡§ü

session_data = {}

def setup_string_handler(app: Client):
    @app.on_message(filters.command(["pyro", "tele"], prefixes=["/", "."]) & (filters.private | filters.group))
    async def session_setup(client, message: Message):
        if message.chat.type in (ChatType.SUPERGROUP, ChatType.GROUP):
            await message.reply("**‚ùå ‡§Ø‡§π ‡§ü‡•Ç‡§≤ ‡§ï‡•á‡§µ‡§≤ ‡§™‡•ç‡§∞‡§æ‡§á‡§µ‡•á‡§ü ‡§ö‡•à‡§ü ‡§Æ‡•á‡§Ç ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§**", parse_mode=ParseMode.MARKDOWN)
            return
        
        platform = "PyroGram" if message.command[0] == "pyro" else "Telethon"
        await handle_start(client, message, platform)

    @app.on_callback_query(filters.regex(r"^session_go_"))
    async def callback_query_go_handler(client, callback_query):
        await handle_callback_query(client, callback_query)

    @app.on_callback_query(filters.regex(r"^session_resume_"))
    async def callback_query_resume_handler(client, callback_query):
        await handle_callback_query(client, callback_query)

    @app.on_callback_query(filters.regex(r"^session_close$"))
    async def callback_query_close_handler(client, callback_query):
        await handle_callback_query(client, callback_query)

    @app.on_message(filters.text & filters.create(lambda _, __, message: message.chat.id in session_data))
    async def text_handler(client, message: Message):
        await handle_text(client, message)

async def handle_start(client, message, platform):
    session_type = "Telethon" if platform == "Telethon" else "Pyrogram"
    session_data[message.chat.id] = {"type": session_type}
    await message.reply(
        f"**{session_type} ‡§∏‡•á‡§∂‡§® ‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂:**\n"
        "1. **API ID** ‡§°‡§æ‡§≤‡•á‡§Ç (my.telegram.org ‡§∏‡•á ‡§≤‡•á ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç)‡•§\n"
        "2. **API HASH** ‡§°‡§æ‡§≤‡•á‡§Ç‡•§\n"
        "3. **‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞** ‡§°‡§æ‡§≤‡•á‡§Ç ‡§ú‡§ø‡§∏‡§∏‡•á ‡§ü‡•á‡§≤‡•Ä‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§Ö‡§ï‡§æ‡§â‡§Ç‡§ü ‡§¨‡§®‡§æ ‡§π‡•à‡•§\n"
        "4. **OTP ‡§°‡§æ‡§≤‡•á‡§Ç** (Telegram ‡§∏‡•á ‡§Æ‡§ø‡§≤‡•á ‡§ï‡•ã‡§° ‡§ï‡•ã ‡§ï‡•â‡§™‡•Ä ‡§ï‡§∞‡§ï‡•á ‡§≠‡•á‡§ú‡•á‡§Ç)‡•§\n"
        "5. **‡§Ö‡§ó‡§∞ 2FA ‡§ë‡§® ‡§π‡•à**, ‡§§‡•ã ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§°‡§æ‡§≤‡•á‡§Ç‡•§\n\n"
        "**‚ö†Ô∏è ‡§∏‡§æ‡§µ‡§ß‡§æ‡§®‡§ø‡§Ø‡§æ‡§Ç:**\n"
        "- ‡§ï‡§ø‡§∏‡•Ä ‡§ï‡•ã ‡§Ö‡§™‡§®‡§æ **Session String** ‡§∂‡•á‡§Ø‡§∞ ‡§® ‡§ï‡§∞‡•á‡§Ç!\n"
        "- ‡§ó‡§≤‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§®‡•á ‡§∏‡•á ‡§∏‡•á‡§∂‡§® ‡§ú‡§®‡§∞‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§ó‡§æ‡•§\n",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üîÑ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ö‡•à‡§®‡§≤", url="https://t.me/ModVipRM"),
                InlineKeyboardButton("My Dev üë®‚Äçüíª", user_id=7303810912)
            ], [
                InlineKeyboardButton("Go", callback_data=f"session_go_{session_type.lower()}"),
                InlineKeyboardButton("Close", callback_data="session_close")
            ]
        ])
    )

async def handle_callback_query(client, callback_query):
    data = callback_query.data
    chat_id = callback_query.message.chat.id

    if data == "session_close":
        await callback_query.message.edit_text("‚ùå ‡§∏‡•á‡§∂‡§® ‡§ú‡•á‡§®‡§∞‡•á‡§∂‡§® ‡§ï‡•à‡§Ç‡§∏‡§ø‡§≤ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§")
        if chat_id in session_data:
            del session_data[chat_id]
        return

    if data.startswith("session_go_"):
        session_type = data.split('_')[2]
        await callback_query.message.edit_text(
            "üìå **‡§Ö‡§™‡§®‡§æ API ID ‡§≠‡•á‡§ú‡•á‡§Ç**",
            parse_mode=ParseMode.HTML
        )
        session_data[chat_id]["stage"] = "api_id"

async def handle_text(client, message: Message):
    chat_id = message.chat.id
    if chat_id not in session_data:
        return

    session = session_data[chat_id]
    stage = session.get("stage")

    if stage == "api_id":
        try:
            api_id = int(message.text)
            session["api_id"] = api_id
            await message.reply("üìå **‡§Ö‡§™‡§®‡§æ API HASH ‡§≠‡•á‡§ú‡•á‡§Ç**")
            session["stage"] = "api_hash"
        except ValueError:
            await message.reply("‚ùå **API ID ‡§ó‡§≤‡§§ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§π‡•Ä API ID ‡§≠‡•á‡§ú‡•á‡§Ç‡•§**")

    elif stage == "api_hash":
        session["api_hash"] = message.text
        await message.reply("üìå **‡§Ö‡§™‡§®‡§æ ‡§´‡§º‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§≠‡•á‡§ú‡•á‡§Ç (‡§â‡§¶‡§æ‡§π‡§∞‡§£: +91xxxxxxxxxx)**")
        session["stage"] = "phone_number"

    elif stage == "phone_number":
        session["phone_number"] = message.text
        await message.reply("üìå **OTP ‡§≠‡•á‡§ú‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à...**")
        await send_otp(client, message)

async def send_otp(client, message):
    session = session_data[message.chat.id]
    api_id = session["api_id"]
    api_hash = session["api_hash"]
    phone_number = session["phone_number"]
    telethon = session["type"] == "Telethon"

    client_obj = TelegramClient(StringSession(), api_id, api_hash) if telethon else Client(":memory:", api_id, api_hash)

    await client_obj.connect()

    try:
        code = await client_obj.send_code_request(phone_number) if telethon else await client_obj.send_code(phone_number)
        session["client_obj"] = client_obj
        session["code"] = code
        session["stage"] = "otp"
        await message.reply("üìå **OTP ‡§≠‡•á‡§ú ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§≠‡•á‡§ú‡•á ‡§ó‡§è ‡§ï‡•ã‡§° ‡§ï‡•ã ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡§ï‡•á ‡§≠‡•á‡§ú‡•á‡§Ç‡•§**")
    except ApiIdInvalid:
        await message.reply("‚ùå **API_ID ‡§Ø‡§æ API_HASH ‡§ó‡§≤‡§§ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§π‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§°‡§æ‡§≤‡•á‡§Ç‡•§**")

async def generate_session(client, message):
    session = session_data[message.chat.id]
    client_obj = session["client_obj"]
    telethon = session["type"] == "Telethon"

    string_session = client_obj.session.save() if telethon else await client_obj.export_session_string()
    text = f"**{session['type'].upper()} SESSION:**\n\n`{string_session}`\n\nGenerated by @ItsSmartToolBot"

    await client_obj.send_message("me", text)
    await client_obj.disconnect()
    await message.reply("‚úÖ **‡§∏‡•á‡§∂‡§® ‡§∏‡•á‡§µ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ ‡§Ö‡§™‡§®‡•á Saved Messages ‡§Æ‡•á‡§Ç ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§**")
    del session_data[message.chat.id]

# Pyrogram Client ‡§∞‡§® ‡§ï‡§∞‡•á‡§Ç
app = Client("sessionstring", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

setup_string_handler(app)

app.run()
